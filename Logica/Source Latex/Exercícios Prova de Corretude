\documentclass{article}


\usepackage[utf8]{inputenc}
\usepackage[brazil]{babel}

\usepackage[margin=2cm]{geometry}
\usepackage{booktabs}
\usepackage{amsthm}
\usepackage{fullpage,enumitem,amssymb,amsmath,xcolor}
\usepackage{parskip}
\usepackage{ragged2e}
\usepackage{multicol}
\usepackage{indentfirst}
\setlength{\parskip}{1em}
\usepackage{siunitx}
\usepackage{setspace}



\title{ECM253 – Linguagens Formais, Autômatos e Compiladores

Lista de Exercícios

Prova de corretude de programas}
\author{Marco Furlan}
\date{Março 2021}

\begin{document}
    \maketitle
    {\large \textbf{Alunos:}}
        
    \begingroup % tabular
        \setlength{\tabcolsep}{20pt}
        \renewcommand{\arraystretch}{1.5}
        \begin{tabular}{lc} % Alunos
            Rodrigo Machado Pedreira & 18.01569-7\\
            Lucas Pedreira Barreto & 17.01106-0\\
        \end{tabular} % Alunos
    \endgroup % tabular
    \bigskip
    \begin{enumerate} % Perguntas Lista 3
        \item De acordo com o axioma da atribuição, qual a pré-condição do seguinte trecho de programa? Explique por que ele funciona.\vspace{5mm}\\% P.1 
            \fbox{\begin{minipage}{15em} 
            
                \{ pré-condição : y =  x - 2 \} \\
                
                \textcolor{blue}{\{y - 1 = x + 1\}}\\
                
                \hspace{10mm} $x \leftarrow x + 1;$ \\
                 
                \{$ x = y - 1$\} \\
            \end{minipage}}
            \vspace{3mm}\newline \textbf{O programa funciona, pois ao executá-lo, nota-se que x recebe y + 2 e resulta na pós-condição proposta no exercício.}
            
            \vspace{60mm}
    
        \item De acordo com o axioma da atribuição, qual a pré-condição do seguinte trecho de programa? Explique por que ele funciona.\vspace{5mm}\\% P.1 
            \fbox{\begin{minipage}{15em} 
            
                \{ pré-condição : \} \\
                
                \textcolor{blue}{ \{y = 2 * x\} }\\
                
                \hspace{10mm} {x \leftarrow 2 $*$ x}; \\
                 
                \{$ x > y$\} \\
            \end{minipage}}
            \vspace{3mm}\newline \textbf{ O programa funciona, pois como y é sempre metade de x, então sempre será menor que x.}
            
            \vspace{10mm}
            
            
        \item Verificar a correção do seguinte trecho de programa com a pré-condição e pós-condição mostradas: \vspace{5mm}\\% P.1 
            \fbox{\begin{minipage}{15em} 
            
                \{ y = 0 \} \\
                
                \hspace{10mm} \textbf{if} $ y < 5$ \textbf{then}
                
                \hspace{15mm} y \leftarrow $y + 1$ 
                
                \hspace{10mm} \textbf{else}
                
                \hspace{15mm} y\leftarrow 5; \\
                
                 
                \{$y = 1$\} \\
            \end{minipage}}
            \vspace{3mm}\newline \textcolor{blue}{\{y = 0 \wedge y < 5\} y \leftarrow y + 1 \{y = 1\}} \\
            
            \textbf {No primeiro caso apresentado, usando a regra de atribuição, chega-se a um antecedente que é  \textcolor{blue}{$0 \leftarrow 0 + 1 $} ou apenas \textcolor{blue}{$y = 1$} e portanto \texttt{Verdadeira.}} 
            
            
            \vspace{70mm}
            
            
        \item Verificar a correção do seguinte trecho de programa com a pré-condição e pós-condição mostradas: \vspace{5mm}\\% P.1 
            \fbox{\begin{minipage}{15em}
            
                \{ x = 7 \} \\
                
                \hspace{10mm} \textbf{if} $x  <= 0$ \textbf{then}
                
                \hspace{15mm} y \leftarrow $x$ 
                
                \hspace{10mm} \textbf{else}
                
                \hspace{15mm} y\leftarrow $2*x$; \\
                
                 
                \{$y = 14$\} \\
            \end{minipage}}
            \vspace{3mm}\newline \textcolor{blue}{\vspace{2mm}$\{x = 7 \wedge x > 0\} y \leftarrow 2 $*$ x \{y = 14\}$} \\
            
            \textbf {No segundo caso apresentado, usando a regra de atribuição, chega-se a um antecedente que é  \textcolor{blue}{$y \leftarrow 2 $*$ 7 $} ou apenas \textcolor{blue}{$y = 14$} e portanto \texttt{Verdadeira}.}
            
            \vspace{10mm}
            
            
        \item Demonstre que o trecho de programa a seguir, em Python, está correto, provando que Q é uma invariante de laço e calculando o seu valor quando o laço é encerrado. \vspace{5mm}\\% P.1 
            \fbox{\begin{minipage}{17em} 
            
            
                \textit{\textcolor{gray}{$# Função : potência$}}\\
                \textit{\textcolor{gray}{$# Sinopse: retornar \ x^y \ para x,y >= 1$}} \\
               
                \textbf{def} potencia (x, y):
               
                \hspace{10mm} i = 0 
                
                \hspace{10mm} j = 1
                
                \hspace{10mm} \textbf{while} i != y:
                
                \hspace{15mm} j = j * X;
                
                \hspace{15mm} i = i + 1;
                
                \hspace{10mm}  \textbf{return} j\\
                 
                
            \end{minipage}}
            \medskip
            \begin{flushleft}
                \setlength{\baselineskip}{17pt}
                \setlength{\parskip}{1em}
                Pre-condições: ${y>=1}$
                
                Analise de iterações (k é o contador de iterações, zero significa que não entrou no laço):
                
                P/ $k = 0$: (condições iniciais, ainda fora do laço):\\
                $i_0=0,j_0=1$\smallskip\\
                P/ $k = 1$:\\
                $i_1=i_0+1=1,j_1=j_0x=x$\smallskip\\
                P/ $k = 2$:\\
                $i_2=i_1+1=2,j_2=j_1x=x^2$\\
                \pagebreak
                P/ $k = 3$:\\
                $i_3=i_2+1=3,j_3=j_2x=x^3$\smallskip\\
                Teste c/ valores concretos: $x=2$ e $y = 3$\\
                Substituindo em $k=3$:\\
                $j_3=2^3=8$
                
                Generalizando:\smallskip\\
                Proposta: $Q(k): j_k=x^{i_k}$\smallskip\\
                Provando por indução finita: $k=0$\vspace{2pt}\\
                $Q(0): j_0=x^{i_0}=1$ \hspace{4pt} ,caso é concreto.
                
                Passo indutivo: Asumir que $Q(k)$ é verdadeiro.\\
                
                Provar que $Q(k+1)$ é verdadeiro.\hspace{2em} Lembrando que: $i_{k+1}=i_k+1$\\
                $j_{k+1}=j_kx$\\
                $j_{k+1}=x^{i_k}x$\\
                $j_{k+1}=x^{i_k+1$\\
                $j_{k+1}=x^{i_{k+1}$\\
                $j_{k+1}=Q(k+1)$
            \end{flushleft}
        \item Provar que o segmento de programa é correto encontrando e demonstrando ainvariante do laço Q apropriada e computando Q ao fim do laço. % P. 6
        
            \vspace{5mm} 
            \fbox{\begin{minipage}{15cm} 
                \textcolor{gray}{\# Função: polinomio\\
                \# Sinopse: Função para calcular o valor do polinomio\\
                \# $a_nx^n+a_{n-1}x^{n-1}+...+a_1x+a_0$\\}
                \textbf{def} poli(a,x):\\
                $n =$ \textbf{len}(a)\\
                $i = 0$\\
                $j = 0$\\
                \textbf{while} $i<n:$\\
                $j=j*x+a[n-i-1]$\\
                $i=i+1$\\
                \textbf{return} $j$
            \end{minipage}}
            \medskip
            \begin{flushleft}
                \setlength{\baselineskip}{20pt}    % Espaço entre linhas
                \setlength{\parskip}{1.3em}        % Espaço entre paragrafos, se alterar o resto adicione \begingroup antes do begin flush e um \end group apos o end flush. Deveria arrumar, mas o flush ja deveria ser um grupo e normalmente essas alteracoes sao restritas ao grupo.
                
                Pre-condições: ${n>i} \vee {n>0}$
                
                Analise de iterações (k é o contador de iterações, zero significa que não entrou no laço):
                
                P/ $k = 0$:(condições iniciais, ainda fora do laço):\\
                $i_0=0,j_0=a_{n-i_0-1}$
                
                P/ $k = 1$:\\
                $i_1=i_0+1=1,j_1=j_0x+a_{n-i_1-1}=a_{n-i_0-1}x+a_{n-i_1-1}$
                
                P/ $k = 2$:\\
                $i_2=i_1+1=2,j_2=j_1x+a_{n-i_2-1}=(a_{n-i_0-1}x+a_{n-i_1-1})x+a_{n-i_2-1}$\\
                $j_2=a_{n-i_0-1}x^2+a_{n-i_1-1}x+a_{n-i_2-1}$
                
                Teste c/ valores concretos: $a=$[1 2 3] e $n = 3$\\
                Substituindo em $k=2$: \hspace{3pt} $a_2x^2+a_1x+a_0$\\
                $3x^2+2x+1$
                
                Generalizando:
                
                Proposta: $Q(k): j_k=\sum_{m=0}^{k}a_{n-i_m-1}x^{k-m}$\\
                Provando por indução finita: $k=0$\\
                $Q(0): j_0=\sum_{m=0}^{0}a_{n-i_0-1}x^{0-0}=a_{n-i_0-1}$ \hspace{4pt} ,caso é concreto.
                
                Passo indutivo: Asumir que $Q(k)$ é verdadeiro.\\
                $j_k=\sum_{m=0}^{k}a_{n-i_m-1}x^{k-m}$
                
                Provar que $Q(k+1)$ é verdadeiro.\hspace{2em} Lembrando que: $i_{k+1}=i_k+1$\\
                $j_{k+1}=j_kx+a_{n-i_{k+1}-1}=j_kx+a_{n-i_k}$\\
                $j_{k+1}=[\sum_{m=0}^{k}a_{n-i_m-1}x^{k-m}]x+a_{n-i_k}$\\
                $j_{k+1}=\sum_{m=0}^{k}a_{n-i_m-1}x^{k+1-m}+a_{n-i_k}$\\
                $j_{k+1}=a_{n-i_0-1}x^{k+1}+a_{n-i_1-1}x^{k}...$ $a_{n-i_k-1}x^1+a_{n-i_k}$\\
                $j_{k+1}=\sum_{m=0}^{k+1}a_{n-i_m-1}x^{k+1-m}$\\
                $j_{k+1}=Q(k+1)$
            \end{flushleft}
    \end{enumerate} % Perguntas Lista 3
\end{document}
